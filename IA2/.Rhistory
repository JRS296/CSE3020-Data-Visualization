print("Answer A:")
print(arr[,,1]*arr[,,2])
print("Answer B:")
print(arr[,,1]%*%arr[,,1])
print("Answer C:")
arr[2,4,1] = 0
arr[5,3,1] = 0
print(arr[,,1])
print("Answer D:")
rotate = t(apply(arr, 2, rev))
print(rotate)
print("Answer E:")
print(arr[,,1]*arr[,,2])
#Assessment IA2 - Q3 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q3: Create an empty matrix 5*5 and do the following operations:
#a. Perform elementwise matrix multiplication
#b. Find the power of a matrix.
#c. Modify any two elements in the matrix.
#d. Rotate the matrix to 90 degrees clockwise.
#e. Access the matrix elements using character index
library(expm)
vector1 <- c(NA, NA, NA, NA, NA)
vector2 <- c(NA, NA, NA, NA, NA)
# Take these vectors as input to the array.
arr <- array(c(vector1, vector2), dim = c(5, 5, 2))
print(arr)
for (k in 1:2)
{
for(i in 1:5)
{
for(j in 1:5)
{
x=floor(runif(1, min=2, max=15))
arr[i,j,k] = x
}
}
}
print(arr)
print("Answer A:")
print(arr[,,1]*arr[,,2])
print("Answer B:")
print(arr[,,1]%*%arr[,,1])
print("Answer C:")
arr[2,4,1] = 0
arr[5,3,1] = 0
print(arr[,,1])
print("Answer D:")
rotate = t(apply(arr[,,1], 2, rev))
print(rotate)
print("Answer E:")
print(arr[,,1]*arr[,,2])
#Assessment IA2 - Q3 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q3: Create an empty matrix 5*5 and do the following operations:
#a. Perform elementwise matrix multiplication
#b. Find the power of a matrix.
#c. Modify any two elements in the matrix.
#d. Rotate the matrix to 90 degrees clockwise.
#e. Access the matrix elements using character index
library(expm)
vector1 <- c(NA, NA, NA, NA, NA)
vector2 <- c(NA, NA, NA, NA, NA)
# Take these vectors as input to the array.
arr <- array(c(vector1, vector2), dim = c(5, 5, 2))
print(arr)
for (k in 1:2)
{
for(i in 1:5)
{
for(j in 1:5)
{
x=floor(runif(1, min=2, max=15))
arr[i,j,k] = x
}
}
}
print(arr)
print("Answer A:")
print(arr[,,1]*arr[,,2])
print("Answer B:")
print(arr[,,1]%*%arr[,,1])
print("Answer C:")
arr[2,4,1] = 0
arr[5,3,1] = 0
print(arr[,,1])
print("Answer D:")
rotate = t(apply(arr[,,1], 2, rev))
print(rotate)
print("Answer E:")
print(arr[1,3,1])
#Assessment IA2 - Q3 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q3: Create an empty matrix 5*5 and do the following operations:
#a. Perform elementwise matrix multiplication
#b. Find the power of a matrix.
#c. Modify any two elements in the matrix.
#d. Rotate the matrix to 90 degrees clockwise.
#e. Access the matrix elements using character index
library(expm)
vector1 <- c(NA, NA, NA, NA, NA)
vector2 <- c(NA, NA, NA, NA, NA)
# Take these vectors as input to the array.
arr <- array(c(vector1, vector2), dim = c(5, 5, 2))
print(arr)
for (k in 1:2)
{
for(i in 1:5)
{
for(j in 1:5)
{
x=floor(runif(1, min=2, max=15))
arr[i,j,k] = x
}
}
}
print(arr)
print("Answer A:")
print(arr[,,1]*arr[,,2])
print("Answer B:")
print(arr[,,1]%*%arr[,,1])
print("Answer C:")
arr[2,4,1] = 0
arr[5,3,1] = 0
print(arr[,,1])
print("Answer D:")
rotate = t(apply(arr[,,1], 2, rev))
print(rotate)
print("Answer E:")
print(arr[1,3,1])
#Assessment IA2 - Q4 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q4: Write a R program to create a list of random numbers in normal distribution and count occurrences of each value
n = floor(rnorm(100, 1, 100))
print('List of random numbers in normal distribution:')
print(n)
t = table(n)
print("Count occurrences of each value:")
print(t)
#Assessment IA2 - Q4 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q4: Write a R program to create a list of random numbers in normal distribution and count occurrences of each value
n = floor(rnorm(100, 1, 100))
print('List of random numbers in normal distribution:')
print(n)
t = table(n)
print("Count occurrences of each value:")
print(t)
#Assessment IA2 - Q5 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q5: Write a R program to create three vectors numeric data, character data and logical data. Display the content of the vectors and their type
a = c( 5, 3, 4, 0, -1, -3)
b = c("Happy", "Sad", "Blue")
c = c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
print(a)
print(typeof(a))
print(b)
print(typeof(b))
print(c)
print(typeof(c))
#Assessment IA2 - Q6 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q6: Write a R program to create bell curve of a random normal distribution
n = floor(rnorm(1000, 200, 100))
t = table(n)
barplot(t)
#Assessment IA2 - Q6 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q6: Write a R program to create bell curve of a random normal distribution
n = floor(rnorm(1000, 500, 100))
t = table(n)
barplot(t)
#Assessment IA2 - Q6 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q6: Write a R program to create bell curve of a random normal distribution
n = floor(rnorm(10000, 500, 100))
t = table(n)
barplot(t)
#Assessment IA2 - Q6 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q6: Write a R program to create bell curve of a random normal distribution
n = floor(rnorm(100000, 500, 100))
t = table(n)
barplot(t)
#Assessment IA2 - Q6 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q6: Write a R program to create bell curve of a random normal distribution
n = floor(rnorm(100000, 500, 100))
t = table(n)
barplot(t)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, +2)
print("list contents:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, +2)
print("list contents:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
data = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, +2)
print("list contents:")
print(data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
data = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, +2)
print("list contents:")
print(data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
data1 = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, +2)
print("list contents:")
print(data1)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
data1 = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, 2)
print("list contents:")
print(data1)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
data1 = list("Grey", "C++", False, c(5, 7, 9, 11), -75.83, 2)
print("list contents:")
print(data1)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Python", "PHP", c(5, 7, 9, 11), TRUE, 125.17, 75.83)
print("Data of the list:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Python", "PHP", TRUE, c(5, 7, 9, 11),  125.17, 75.83)
print("Data of the list:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Python", "PHP", TRUE, c(5, 7, 9, 11),  125.17, -75.83)
print("Data of the list:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Grey", "C++", TRUE, c(5, 7, 9, 11),  125.17, -75.83)
print("Data of the list:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Grey", "C++", TRUE, c(5, 7, 9, 11),  125.17, -75.83)
print("Data of the list:")
print(list_data)
#Assessment IA2 - Q7 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q7: Write a R program to create a list containing strings, numbers, vectors and a logical values
list_data = list("Grey", "C++", TRUE, c(5, 7, 9, 11),  125.17, -75.83)
print("Data of the list:")
print(list_data)
#Assessment IA2 - Q8 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q8: Write a R program to compute the Armstrong number and Fibonacci series
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
print("Enter number of terms: ")
x = readlin(as.integer())
Fibonacci <- numeric(x)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("First 10 Fibonacci numbers:")
print(Fibonacci)
#Assessment IA2 - Q8 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q8: Write a R program to compute the Armstrong number and Fibonacci series
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
print("Enter number of terms: ")
x = readlin(as.integer())
Fibonacci <- numeric(x)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Assessment IA2 - Q9 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q9: Write a R program to create a two-dimensional 5x3 array of sequence of even integers greater than 50
a <- array(seq(from = 50, length.out = 15, by = 2), c(5, 3))
print("Content of the array:")
print("5×3 array of sequence of even integers greater than 50:")
print(a)
#Assessment IA2 - Q9 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q9: Write a R program to create a two-dimensional 5x3 array of sequence of even integers greater than 50
a <- array(seq(from = 50, length.out = 15, by = 2), c(5, 3))
print("Content of the array:")
print("5×3 array of sequence of even integers greater than 50:")
print(a)
#Assessment IA2 - Q10 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q10: Write a R program to add two vectors of integers type and length 3
x = c(1, 2, 3)
y = c(0, 1, 4)
print("Original Vectors:")
print(x)
print(y)
print("On adding two Vectors:")
z = x + y
print(z)
#Assessment IA2 - Q10 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q10: Write a R program to add two vectors of integers type and length 3
x = c(1, 2, 3)
y = c(0, 1, 4)
print("Original Vectors:")
print(x)
print(y)
print("On adding two Vectors:")
z = x + y
print(z)
#Assessment IA2 - Q8 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q8: Write a R program to compute the Armstrong number and Fibonacci series
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
print("Enter number of terms: ")
x = readlin(as.integer())
Fibonacci <- numeric(x)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Assessment IA2 - Q8 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q8: Write a R program to compute the Armstrong number and Fibonacci series
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
sum = 0
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
Fibonacci <- numeric(x)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
Fibonacci <- numeric(x)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:x) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Assessment IA2 - Q8 - CSE3020(ELA)
#Jonathan Rufus Samuel (20BCT0332)
#Q8: Write a R program to compute the Armstrong number and Fibonacci series
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
Fibonacci[1] <- 0
Fibonacci[2] <- Fibonacci[3] <- 1
for (i in 4:x) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
Fibonacci <- numeric(x)
Fibonacci[1] <- 0
Fibonacci[2] <- Fibonacci[3] <- 1
for (i in 4:x) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
#Armstrong Number Check
num = as.integer(readline(prompt="Enter a number: "))
sum = 0
temp = num
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 3)
temp = floor(temp / 10)
}
if(num == sum) {
print(paste(num, "is an Armstrong number"))
} else {
print(paste(num, "is not an Armstrong number"))
}
#Fibonacci Series
x = as.integer(readline(prompt="Enter number of terms: "))
Fibonacci <- numeric(x)
Fibonacci[1] <- 0
Fibonacci[2] <- Fibonacci[3] <- 1
for (i in 4:x) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("Fibonacci numbers:")
print(Fibonacci)
n = floor(rnorm(100000000, 500, 100))
t = table(n)
plot(t)
#Question 1 - Swap via temporary variable
a = 5
b = 10
temp = a
a = b
b = temp
a
b
#Question 2 - Printing Area of Triangle
b = 10
h = 13
T = (1/2*b*h)
T
#Question 1 - Swap via temporary variable
a = 5
b = 10
a
b
temp = a #swapping via temporary variable
a = b
b = temp
a
b
#Question 2 - Printing Area of Triangle
b = 10 #Base
h = 13 #Height
T = (1/2*b*h)
T
